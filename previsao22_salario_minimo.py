# -*- coding: utf-8 -*-
"""previsao22_salario_minimo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yW1UfW4_-a0NZ-NCcwUbz6o4xBtS4cAH

# Bibliotecas
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as st
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from scipy.stats import t
from sklearn import linear_model

"""# SALÁRIO MÍNIMO

---

# Dados Salário Mínimo
"""

df_sm = pd.read_excel('/content/salario_minimo.xlsx')

"""**Tratamento dos Dados e Criação de novo DataFrame**"""

df_sm.head(10)

df_sm = df_sm.rename(columns={'Data': 'data', 'Valor (R$)': 'valor'})

df_sm2 = df_sm.groupby('valor').agg(datas=('data', 'unique')).reset_index()

df_sm2.head(5)

df_sm2['datas'][0][0]

valor = []
datas = []
for i in range(len(df_sm2['valor'])):
  valor.append(df_sm2['valor'][i])
  datas.append(df_sm2['datas'][i][0])
#é adicionado a lista datas, as primeiras datas no qual ocorreram mudanças do salário mínimo

datas2 = []
for i in datas:
  i = str(i)
  dig = i[:4]
  dig = int(dig)
  datas2.append(dig)
#a intenção deste código é retirar o valor dos meses, para ficar apenas com o valor do ano

aum = []
for i in range(len(valor)):
  if i == 0:
    aum.append(0)
  else:
    aum.append(round((valor[i]-valor[i-1])/(valor[i-1]),2))
#criação de uma nova coluna com o aumento anual em % do salário mínimo

df_sm = pd.DataFrame()
df_sm['datas'] = datas2
df_sm['valor'] = valor
df_sm['aumento'] = aum

df_sm.head(4)

df_sm = df_sm.reset_index()

duplicados = []
for i in range(len(datas2)):
  if i == (len(datas2)-1):
    break
  elif datas2[i] == datas2[i+1]:
    duplicados.append(i)
duplicados

for i in duplicados:
  df_sm.drop(df_sm['index'][i], axis =0, inplace=True)
#alguns anos apresentaram mais de uma alteração no valor do salário mínimo
#nestes casos foi considerado apenas o último valor anual

df_sm.drop('index', inplace=True, axis=1)

df_sm.tail(5)

df_sm = df_sm.reset_index()

df_sm.drop('index', inplace=True, axis=1)

df_sm.tail(5)

df_sm2 = df_sm.copy()

"""# Análise dos Dados - Gráficos

**Gráficos**
"""

df_sm.plot.bar(x='datas', y='aumento', rot=90, title = 'Aumento do Salário Mínimo em % ao Longo do Tempo',figsize=(10,4));

df_sm.plot.bar(x='datas', y='valor', rot=90, title = 'Salário Mínimo ao Longo do Tempo',figsize=(10,4));

sns.lmplot(x='datas',
            y='aumento',
            data=df_sm, height=4, aspect=2.2).set(title='Regressão Linear do Aumento do Salário Mínimo (%) ao Longo do Tempo')
plt.show()

sns.lmplot(x='datas',
            y='valor',
            data=df_sm, height=4, aspect=2.2).set(title='Regressão Linear do Salário Mínimo ao Longo do Tempo')
plt.show()

"""# Análise dos Dados - Regressão Linear"""

df_sm.sample(2)

"""**Regressão Linear:** Tempo x Aumento do Salário Mínimo"""

xx = df_sm.drop(columns=['valor','aumento'])
yy = df_sm[['aumento']]

model2 = LinearRegression().fit(xx, yy)

print(f"R²: {model2.score(xx,yy):.4f}")

print('Há uma correlação negativa fraca entre o aumento salarial e o tempo (Baixo R²)')

"""**Regressão Linear:** Tempo x Salário Mínimo"""

x = df_sm.drop(columns=['valor','aumento'])
y = df_sm[['valor']]

model = LinearRegression().fit(x, y)

r_sq = model.score(x, y)
b = model.intercept_
a = model.coef_
print(f"R²: {r_sq:.4f}")

print('Há uma correlação positiva e forte entre o salário mínimo e o tempo (R² = 0.96)')

"""# Regressão Linear sem dados de 2022

***Valor estimado a partir de Regressão Linear***
"""

df_sm = df_sm[:-1]
#retirada da linha que apresentava o salário mínimo real de 2022

df_sm.tail(2)

x_22 = df_sm.drop(columns=['valor','aumento'])
y_22 = df_sm[['valor']]

model_22 = LinearRegression().fit(x_22, y_22)

r_sq_22 = model_22.score(x_22, y_22)
b_22 = model_22.intercept_
a_22 = model_22.coef_
print(f"R²: {r_sq_22:.4f}")

"""Intervalo de Confiança"""

y_predict = model_22.predict(x_22).tolist()
y_pre = []
for i in y_predict:
  for ii in i:
    y_pre.append(ii)

ic = st.t.interval(alpha=0.95, df=len(y_pre)-1,
              loc=np.mean(y_pre),
              scale=st.sem((y_pre)))

media_22 = model_22.predict(x_22).mean()

if media_22-ic[0] == ic[1]-media_22:
  valor_ic = ic[1]-media_22
valor_ic = round(valor_ic,2)

est_2022 = (a_22*2022 + b_22).tolist()
est_2022 = round(est_2022[0][0],2)

df_sm2.tail(2)

dif_est_2022 = round(df_sm2['valor'][len(df_sm2)-1]-est_2022,2)
dif_est_2022_por = round(dif_est_2022*100/(df_sm2['valor'][len(df_sm2)-1]),2)
print(f"Salário mínimo real em 2022: R${df_sm2['valor'][len(df_sm2)-1]}")
print(f'Salário mínimo estimado: R${est_2022}')
print(f"Diferença do valor estimado com o real: R${dif_est_2022}")
print(f'Diferença em porcentagem: {dif_est_2022_por}%')
print(f"Salário estimado + IC: R${est_2022+valor_ic:.2f}")
print(f"Salário estimado - IC: R${est_2022-valor_ic:.2f}")
print(f'R²: {r_sq_22:.4f}')

"""***Valor estimado a partir de Regressão Linear com Treinamento dos Dados***"""

X_train, X_test, y_train, y_test = train_test_split(x_22, y_22, random_state=13, test_size = 0.3)

model_ml = LinearRegression()
model_ml.fit(X_train, y_train)
pred_train_model_ml = model_ml.predict(X_train)
pred_test_model_ml = model_ml.predict(X_test)

r_sq_ml_train = model_ml.score(X_train, y_train)
r_sq_ml_test = model_ml.score(X_test,y_test)
b_ml = model_ml.intercept_
a_ml = model_ml.coef_
print(f"R² train: {r_sq_ml_train:.4f}")
print(f"R² test: {r_sq_ml_test:.4f}")

pred_train_model_ml

pred_train_model_ml = pred_train_model_ml.tolist()
y_pre_ml = []
for i in pred_train_model_ml:
  for ii in i:
    y_pre_ml.append(ii)

ic_ml = st.t.interval(alpha=0.95, df=len(y_pre_ml)-1,
              loc=np.mean(y_pre_ml),
              scale=st.sem((y_pre_ml)))

media_ml = model_ml.predict(X_train).mean()

if media_ml-ic_ml[0] == ic_ml[1]-media_ml:
  valor_ic_ml = ic_ml[1]-media_ml
valor_ic_ml = round(valor_ic_ml,2)

est_2022_ml= (a_ml*2022 + b_ml).tolist()
est_2022_ml = round(est_2022_ml[0][0],2)

dif_est_2022_ml = round(df_sm2['valor'][len(df_sm2)-1]-est_2022_ml,2)
dif_est_2022_ml_por = round(dif_est_2022_ml*100/(df_sm2['valor'][len(df_sm2)-1]),2)
print(f"Salário mínimo real em 2022: R${df_sm2['valor'][len(df_sm2)-1]}")
print(f'Salário mínimo estimado: R${est_2022_ml}')
print(f"Diferença do valor estimado com o real: R${dif_est_2022_ml}")
print(f'Diferença em porcentagem: {dif_est_2022_ml_por}%')
print(f"Salário estimado + IC: R${est_2022_ml+valor_ic_ml:.2f}")
print(f"Salário estimado - IC: R${est_2022_ml-valor_ic_ml:.2f}")
print(f'R²: {r_sq_ml_train:.4f}')

X_train_regr = sm.add_constant(X_train)
model_lr = sm.OLS(y_train, X_train_regr).fit()
print(model_lr.summary())

"""# ANÁLISE CONSIDERANDO A VARIÁVEL INFLAÇÃO

---

# Dados Inflação
"""

df_i = pd.read_excel('/content/inflação_brasil.xlsx')

df_i.head(4)

df_i.drop('Unnamed: 1', inplace=True, axis=1)

df_i=df_i.dropna().reset_index(drop=True)

df_i.sample(2)

df_i = df_i.rename(columns={'Variação acumulada no ano durante o Plano Real': 'datas', 'Unnamed: 2': 'valor'})

datas = []
for i in df_i['datas']:
  dig = i[:4]
  dig = int(dig)
  datas.append(dig)
df_i['datas']=datas
#é inserido apenas o ano na lista datas

valores=[]
for i in df_i['valor']:
  i = i.replace(',','.')
  i = float(i)
  valores.append(i)
df_i['valor']=valores
#conversão dos valores da coluna 'valor' para float

df_i.head(2)

df_i2 = df_i.copy()

"""# Análise dos Dados - Gráficos"""

df_i.plot.bar(x='datas', y='valor', rot=90, title = 'Inflação ao Longo do Tempo',figsize=(10,4));

sns.lmplot(x='datas',
            y='valor',
            data=df_i, height=4, aspect=2.2).set(title='Regressão Linear da Inflação ao Longo do Tempo')
plt.show()

"""# Análise dos Dados - Regressão Linear"""

df_i.head(3)

x = df_i.drop(columns=['valor'])
y = df_i[['valor']]

model = LinearRegression().fit(x, y)

r_sq_i = model.score(x, y)
b_i = model.intercept_
a_i = model.coef_
print(f"R²: {r_sq_i:.4f}")

print('Há uma correlação positiva fraca entre a inflação e o tempo (R² = 0.13)')

"""# União do dataframe Salário Mínimo (df_sm) com Inflação (df_i)"""

df_sm.sample(3)

df_i.sample(3)

df_i = df_i.rename(columns={'valor': 'valor infla'})

antes = len(df_sm)
aux = df_sm.merge(df_i[['datas','valor infla']],
                           on = 'datas',
                           how = 'left')
depois = len(aux)
assert antes == depois
df_i_sm = aux
#criação de um novo dataframe unindo o do salário mínimo com o da inflação

df_i_sm.head(3)

df_i_sm = df_i_sm[1:]
#na tabela fornecida pelo IBGE não consta o valor da inflação de 1994, por isso a sua exclusão

"""# Regressão Linear do Valor da Inflação com o Salário Mínimo"""

x_c = df_i_sm[['valor infla']]
y_c = df_i_sm[['valor']]

model_c = LinearRegression().fit(x_c,y_c)
r_sq_c = model_c.score(x_c, y_c)
print(f"R²: {r_sq_c:.4f}")

print ('Há uma relação positiva fraca entre a inflação e o salário mínimo')

"""# Regressão Linear do Valor da Inflação com o Aumento do Salário Mínimo"""

x_d = df_i_sm[['aumento']]
y_d = df_i_sm[['valor infla']]

model_d = LinearRegression().fit(x_d,y_d)
r_sq_d = model_d.score(x_d,y_d)
print(f'R²: {r_sq_d:.4f}')

print ('Há uma relação positiva fraca entre a inflação e o salário mínimo')

"""# Regressão Linear Múltipla

***Aumento do Salário Mínimo x Data e Inflação***
"""

df_i_sm.head(2)

x = df_i_sm[['datas', 'valor infla']]
y = df_i_sm['aumento']

model = LinearRegression().fit(x,y)
r_sq = model.score(x, y)
print(f"R²: {r_sq:.4f}")

"""***Aumento do Salário Mínimo x Salário Mínimo e Inflação***"""

x = df_i_sm[['valor', 'valor infla']]
y = df_i_sm['aumento']

model = LinearRegression().fit(x,y)
r_sq = model.score(x, y)
print(f"R²: {r_sq:.4f}")

"""***Salário Mínimo x Data e Inflação***"""

df_i_sm.tail(2)

x = df_i_sm[['datas', 'valor infla']]
y = df_i_sm['valor']

model = LinearRegression().fit(x,y)

r_sq_ism = model.score(x,y)
print(f"R²: {r_sq_ism:.4f}")

"""Predição do Salário Mínimo em 2022 a partir de Regressão Linear Múltipla"""

media_infla = x['valor infla'].mean()
#média dos valores de inflação

predicao22 = model.coef_[0]*2022 + model.coef_[1]*media_infla + model.intercept_
#o valor de inflação utilizado para 2022 foi a média dos valores de inflação

media_previstasalario = model.predict(x).mean()

y_predict = model.predict(x).tolist()
ic = st.t.interval(alpha=0.95, df=len(y_predict)-1,
              loc=np.mean(y_predict),
              scale=st.sem((y_predict)))

if media_previstasalario-ic[0] == ic[1]-media_previstasalario:
  valor_ic = ic[1]-media_previstasalario
valor_ic = round(valor_ic,2)

print(f"Salário mínimo real em 2022: R$1212.00")
print(f"Salário mínimo estimado: R${predicao22:.2f}")
print(f"Diferença: R${1212-predicao22:.2f} \nDiferença em porcentagem: {((1212-predicao22)*100)/1212:.2f}%")
print(f"Salário estimado + IC: R${predicao22+valor_ic:.2f}")
print(f"Salário estimado - IC: R${predicao22-valor_ic:.2f}")
print(f"R²: {r_sq_ism:.4f}")

"""Previsão do Salário Mínimo a partir de Regressão Linear Múltipla com Treinamento dos Dados"""

X_train, X_test, y_train, y_test = train_test_split(x, y, random_state=13, test_size = 0.3)

media_infla_ml = X_train['valor infla'].mean()
#média dos valores de inflação do grupo de treino

model_ml = LinearRegression()
model_ml.fit(X_train, y_train)
pred_train_model_ml = model_ml.predict(X_train)
pred_test_model_ml = model_ml.predict(X_test)

r_sq_ml_train = model_ml.score(X_train, y_train)
r_sq_ml_test = model_ml.score(X_test,y_test)
b_ml = model_ml.intercept_
a_ml = model_ml.coef_
print(f"R² train: {r_sq_ml_train:.4f}")
print(f"R² test: {r_sq_ml_test:.4f}")

ic_ml = st.t.interval(alpha=0.95, df=len(pred_train_model_ml)-1,
              loc=np.mean(pred_train_model_ml),
              scale=st.sem((pred_train_model_ml)))

media_ml = model_ml.predict(X_train).mean()

if media_ml-ic_ml[0] == ic_ml[1]-media_ml:
  valor_ic_ml = ic_ml[1]-media_ml
valor_ic_ml = round(valor_ic_ml,2)

predicao_ml = a_ml[0]*2022 + a_ml[1]*media_infla_ml + b_ml
#o valor de inflação utilizado para 2022 foi a média dos valores de inflação do grupo de treino

print(f"Salário mínimo real em 2022: R$1212.00")
print(f"Salário mínimo estimado: R${predicao_ml:.2f}")
print(f"Diferença do valor estimado com o real: R${1212-predicao_ml:.2f} \nDiferença em porcentagem: {((1212-predicao_ml)*100)/1212:.2f}%")
print(f"Salário estimado + IC: R${predicao_ml+valor_ic_ml:.2f}")
print(f"Salário estimado - IC: R${predicao22-valor_ic_ml:.2f}")
print(f"R²: {r_sq_ml_train:.4f}")

"""# Diferença de todos os resultados obtidos"""

val = [est_2022,est_2022_ml,round(predicao22,2),round(predicao_ml,2)]
dif_em = [dif_est_2022,dif_est_2022_ml,round((1212-predicao22),2),round((1212-predicao_ml),2)]
dif_em_por = [dif_est_2022_por,dif_est_2022_ml_por,
              round((((1212-predicao22)*100)/1212),2),round((((1212-predicao_ml)*100)/1212),2)]
dif_met = ['RL', 'RL com treinamento','RL com Inflação','RL com Inflação e com treinamento']
dif_rsq = [r_sq_22,r_sq_ml_train,r_sq_ism,r_sq_ml_train]
df_diferenca = pd.DataFrame()
df_diferenca['Metodologia'] = dif_met
df_diferenca['Valor SM'] = val
df_diferenca['Diferença em Real']=dif_em
df_diferenca['Diferença em %']=dif_em_por
df_diferenca['R²'] = dif_rsq
df_diferenca

sns.barplot(data=df_diferenca,
            x = 'Metodologia',
            y = 'Diferença em %').set(title='Diferença em % de Valores do Salários Mínimos com o Real Valor de 2022 utilizando distintas metodologias');
plt.xticks(rotation=70);

print('A metodologia que apresentou o salário mínimo mais próximo ao esperado para 2022,')
print('foi a Regressão Linear Múltipla, utilizando para a inflação o valor médio entre 1995-2021')

